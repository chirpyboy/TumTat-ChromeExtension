/**
 * AI Summary Content - Content Script
 * X·ª≠ l√Ω t∆∞∆°ng t√°c v·ªõi trang web v√† hi·ªÉn th·ªã popup Gemini
 */

(async function() {
    // Utils instance
    const Utils = window.AIUtils;

    /**
     * MobileBubbleMenu: Qu·∫£n l√Ω giao di·ªán menu bubble tr√™n thi·∫øt b·ªã di ƒë·ªông
     */
    const MobileBubbleMenu = {
        // Bi·∫øn l∆∞u tr·ªØ c√°c ph·∫ßn t·ª≠ DOM
        bubbleElement: null,
        menuItemsElement: null,
        
        /**
         * Kh·ªüi t·∫°o menu bubble
         */
        initialize() {
            // T·∫°o c√°c ph·∫ßn t·ª≠ CSS cho menu bubble
            this.injectStyles();
            
            // T·∫°o ph·∫ßn t·ª≠ HTML cho menu bubble
            this.createMenuElements();
            
            // ƒêƒÉng k√Ω c√°c s·ª± ki·ªán
            this.registerEventListeners();
            
            return this;
        },
        
        /**
         * Th√™m CSS cho menu bubble v√†o trang
         */
        injectStyles() {
            const style = document.createElement('style');
            style.textContent = `
                /* Menu Bubble Styles */
                #mobile-menu-bubble {
                    display: none; /* M·∫∑c ƒë·ªãnh ·∫©n tr√™n desktop */
                    position: fixed;
                    bottom: 20px;
                    right: 20px;
                    width: 42px; /* Gi·∫£m 30% t·ª´ 60px */
                    height: 42px; /* Gi·∫£m 30% t·ª´ 60px */
                    background-color: #4285f4;
                    border-radius: 50%;
                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
                    z-index: 100000001;
                    cursor: pointer;
                    transition: all 0.3s ease;
                }
            
                #mobile-menu-bubble .bubble-icon {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    width: 100%;
                    height: 100%;
                    color: white;
                    font-size: 18px; /* Gi·∫£m k√≠ch th∆∞·ªõc font */
                }
                
                #mobile-menu-bubble .bubble-icon img {
                    width: 70%;
                    height: 70%;
                    object-fit: contain;
                }
            
                #mobile-menu-bubble:hover {
                    transform: scale(1.05);
                    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
                }
            
                #mobile-menu-items {
                    position: fixed;
                    bottom: 70px; /* ƒêi·ªÅu ch·ªânh l·∫°i v·ªã tr√≠ ƒë·ªÉ ph√π h·ª£p v·ªõi bubble nh·ªè h∆°n */
                    right: 20px;
                    display: none;
                    flex-direction: column;
                    gap: 10px;
                    z-index: 100000001;
                }
            
                #mobile-menu-items.active {
                    display: flex;
                    animation: fadeInUp 0.3s ease forwards;
                }
            
                .mobile-menu-item {
                    background-color: white;
                    color: #333;
                    padding: 10px 15px;
                    border-radius: 20px;
                    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
                    cursor: pointer;
                    transition: all 0.2s ease;
                    display: flex;
                    align-items: center;
                    gap: 8px;
                }
            
                .mobile-menu-item:hover {
                    background-color: #f5f5f5;
                    transform: translateX(-5px);
                }
            
                @keyframes fadeInUp {
                    from {
                        opacity: 0;
                        transform: translateY(20px);
                    }
                    to {
                        opacity: 1;
                        transform: translateY(0);
                    }
                }
            
                /* Ch·ªâ hi·ªÉn th·ªã tr√™n thi·∫øt b·ªã di ƒë·ªông v√† tablet */
                @media only screen and (max-width: 1024px) {
                    #mobile-menu-bubble {
                        display: block;
                    }
                }
                
                /* Mobile class cho popup modal */
                #ai-popup-modal.mobile {
                    width: 100vw !important;
                    height: 100vh !important;
                }
                
                #ai-popup-modal.mobile .iframe-wrapper {
                    width: 100% !important;
                    height: 100% !important;
                    border-radius: 0 !important;
                }
            `;
            document.head.appendChild(style);
        },
        
        /**
         * T·∫°o ph·∫ßn t·ª≠ HTML cho menu bubble
         */
        createMenuElements() {
            // T·∫°o menu bubble
            this.bubbleElement = document.createElement('div');
            this.bubbleElement.id = 'mobile-menu-bubble';
            
            // L·∫•y URL icon c·ªßa extension
            const iconURL = chrome.runtime.getURL('images/ai_icon_32.png');
            
            this.bubbleElement.innerHTML = `
                <div class="bubble-icon">
                    <img src="${iconURL}" alt="AI Extension">
                </div>
            `;
            
            // T·∫°o menu items
            this.menuItemsElement = document.createElement('div');
            this.menuItemsElement.id = 'mobile-menu-items';
            this.menuItemsElement.innerHTML = `
                <div class="mobile-menu-item" data-action="summaryContentMenu">
                    <span>üìù</span> Summarize content
                </div>
                <div class="mobile-menu-item" data-action="translateContentMenu">
                    <span>üåê</span> Translate content
                </div>
                <div class="mobile-menu-item" data-action="askContentMenu">
                    <span>üí¨</span> Q&A about content
                </div>
            `;
            
            // Th√™m v√†o body
            document.body.appendChild(this.bubbleElement);
            document.body.appendChild(this.menuItemsElement);
        },
        
        /**
         * ƒêƒÉng k√Ω c√°c s·ª± ki·ªán cho menu bubble
         */
        registerEventListeners() {
            // Hi·ªÉn th·ªã/·∫©n menu khi click v√†o bubble
            this.bubbleElement.addEventListener('click', () => {
                this.menuItemsElement.classList.toggle('active');
            });
            
            // ƒê√≥ng menu khi click ra ngo√†i
            document.addEventListener('click', (event) => {
                if (!this.bubbleElement.contains(event.target) && !this.menuItemsElement.contains(event.target)) {
                    this.menuItemsElement.classList.remove('active');
                }
            });
            
            // X·ª≠ l√Ω khi click v√†o menu item
            const menuOptions = this.menuItemsElement.querySelectorAll('.mobile-menu-item');
            menuOptions.forEach(item => {
                item.addEventListener('click', async function() {
                    const action = this.getAttribute('data-action');
                    
                    // G·ªçi tr·ª±c ti·∫øp c√°c h√†m x·ª≠ l√Ω t∆∞∆°ng ·ª©ng
                    const googleSearchPattern = /google\.com(\.vn)?\/search/;
                    try {
                        // Handle Google search results
                        if (action === "summaryContentMenu" && googleSearchPattern.test(location.href)) {
                            const searchQuery = Utils.getUrlParams().get("q");
                            await ContentHandler.handleGoogleSearchSummary(searchQuery);
                        } 
                        // Handle content summary
                        else if (action === "summaryContentMenu") {
                            await ContentHandler.handleSummaryContent({
                                linkUrl: "",
                                selectionText: ""
                            });
                        } 
                        // Handle content translation
                        else if (action === "translateContentMenu") {
                            await ContentHandler.handleTranslateContent({
                                selectionText: ""
                            });
                        } 
                        // Handle content Q&A
                        else if (action === "askContentMenu") {
                            await ContentHandler.handleAskContent({
                                linkUrl: "",
                                selectionText: ""
                            });
                        }
                    } catch (error) {
                        console.error("Error handling menu item click:", error);
                    }
                    
                    // ƒê√≥ng menu sau khi click
                    document.getElementById('mobile-menu-items').classList.remove('active');
                });
            });
        },
        
        /**
         * Hi·ªÉn th·ªã bubble
         */
        show() {
            if (this.bubbleElement) {
                this.bubbleElement.style.display = 'block';
            }
        },
        
        /**
         * ·∫®n bubble
         */
        hide() {
            if (this.bubbleElement) {
                this.bubbleElement.style.display = 'none';
                // ƒê·ªìng th·ªùi ·∫©n menu items
                this.menuItemsElement.classList.remove('active');
            }
        }
    };

    /**
     * AIPopup: Qu·∫£n l√Ω giao di·ªán popup AI
     */
    const AIPopup = {
        // Properties
        isVisible: false,
        element: null,
        iframe: null,
        btnSidebar: null,
        btnClose: null,
        
        /**
         * Kh·ªüi t·∫°o v√† tr·∫£ v·ªÅ instance c·ªßa popup
         * @returns {Object} instance c·ªßa AIPopup
         */
        async initialize() {
            if (!this.element) {
                try {
                    // T·∫£i n·ªôi dung HTML
                    const htmlURL = chrome.runtime.getURL('popup.html');
                    const fetchResult = await fetch(htmlURL);
                    const html = await fetchResult.text();
                    
                    // Inject HTML v√†o trang
                    Utils.injectHTML(html);
                    
                    // L∆∞u tr·ªØ tham chi·∫øu ƒë·∫øn c√°c ph·∫ßn t·ª≠
                    this.element = document.getElementById("ai-popup-modal");
                    this.btnSidebar = this.element.querySelector(".btn-sidebar");
                    this.iframe = this.element.querySelector("iframe");
                    this.btnClose = this.element.querySelector(".close-popup");
                    // Ki·ªÉm tra k√≠ch th∆∞·ªõc m√†n h√¨nh v√† th√™m class mobile n·∫øu c·∫ßn
                    this.checkAndAddMobileClass();
                    
                    // Th√™m event listener cho s·ª± ki·ªán resize
                    window.addEventListener('resize', this.checkAndAddMobileClass.bind(this));
                    
                    // ƒêƒÉng k√Ω event listeners
                    this.element.addEventListener("click", this.handleDocumentClick.bind(this));
                    this.btnSidebar.addEventListener("click", this.handleSidebarButtonClick.bind(this));
                    this.btnClose.addEventListener("click", this.hide.bind(this));
                    
                    // ƒêƒÉng k√Ω listener cho s·ª± ki·ªán message t·ª´ iframe
                    window.addEventListener("message", (event) => {
                        if (event.data && event.data.action === "onAIIframeLoaded") {
                            window.AIIframeLoaded = true;
                        } else if (event.data && event.data.action === "onPressESC") {
                            this.hide();
                        }
                    });
                } catch (error) {
                    console.error("Error initializing AIPopup:", error);
                }
            }else{
                window.AIIframeLoaded = false;
                this.iframe.src = ""
                this.iframe.src = "https://gemini.google.com/app"
            }
            
            return this;
        },
        
        /**
         * Ki·ªÉm tra k√≠ch th∆∞·ªõc m√†n h√¨nh v√† th√™m class mobile n·∫øu c·∫ßn
         */
        checkAndAddMobileClass() {
            if (window.innerWidth <= 1024) {
                this.element.classList.add('mobile');
            } else {
                this.element.classList.remove('mobile');
            }
        },
        
        /**
         * Hi·ªÉn th·ªã popup
         */
        show() {
            if (this.isVisible) {
                return;
            }
            
            this.isVisible = true;
            this.element.classList.add("visible");
            this.element.style.display = "flex";
            
            // ·∫®n menu bubble khi popup hi·ªÉn th·ªã
            MobileBubbleMenu.hide();
        },
        
        /**
         * ·∫®n popup
         */
        hide() {
            if (!this.isVisible) {
                return;
            }
            
            this.isVisible = false;
            this.element.classList.remove("visible");
            this.element.style.display = "none";
            
            // Hi·ªÉn th·ªã l·∫°i menu bubble khi popup ·∫©n
            MobileBubbleMenu.show();
        },
        
        /**
         * Chuy·ªÉn ƒë·ªïi sang ch·∫ø ƒë·ªô sidebar
         */
        handleSidebarButtonClick() {
            this.element.classList.add("left-side");
        },
        
        /**
         * X·ª≠ l√Ω s·ª± ki·ªán click tr√™n overlay
         * @param {MouseEvent} event - S·ª± ki·ªán click
         */
        handleDocumentClick(event) {
            // ƒê√≥ng popup khi click ra ngo√†i iframe
            if (event.target === this.element) {
                this.hide();
            }
        }
    };

    /**
     * ContentHandler: X·ª≠ l√Ω c√°c ch·ª©c nƒÉng ch√≠nh c·ªßa extension
     */
    const ContentHandler = {
        /**
         * X·ª≠ l√Ω ch·ª©c nƒÉng t√≥m t·∫Øt n·ªôi dung t·ª´ k·∫øt qu·∫£ Google Search
         * @param {string} searchQuery - Query t√¨m ki·∫øm hi·ªán t·∫°i
         * @returns {Promise<void>}
         */
        async handleGoogleSearchSummary(searchQuery) {
            try {
                // L·∫•y ng√¥n ng·ªØ t·ª´ c√†i ƒë·∫∑t
                const responseLanguage = await Utils.getResponseLanguage();

                // L·∫•y c√°c li√™n k·∫øt t·ª´ k·∫øt qu·∫£ t√¨m ki·∫øm
                const linkElements = [...document.querySelectorAll("#search a[data-ved]")];
                const validLinks = linkElements
                    .map(element => element.href)
                    .filter(href => !href.includes("youtube.com") && !href.includes("facebook.com") && !href.includes(".pdf"))
                    .slice(0, 5);
                
                // Ph√¢n t√≠ch n·ªôi dung c√°c b√†i vi·∫øt t·ª´ c√°c li√™n k·∫øt
                const articles = await Promise.all(
                    validLinks.map(url => Utils.parseArticleFromURL(url))
                );
                
                // T·∫°o n·ªôi dung tham chi·∫øu cho AI
                const refContents = articles
                    .filter(article => article !== null)
                    .map(article => {
                        return `<article>
                            <title>${article.title}</title>
                            <content>${article.content.substring(0, 5000)}</content>
                        </article>`;
                    })
                    .join("\n");
                
                // T·∫°o prompt cho AI
                const languagePrompt = `<require>Always answer in ${responseLanguage}</require>`;

                const prompt = `<role>The user is searching on Google, your task is to use the Google search results content to answer the user's question</role>
${languagePrompt}
<search-query>${searchQuery}</search-query>
<reference-articles>
    ${refContents}
</reference-articles>`;
                
                // Hi·ªÉn th·ªã popup v√† g·ª≠i prompt t·ªõi Gemini
                const popup = await AIPopup.initialize();
                popup.show();
                
                await Utils.waitFor("AIIframeLoaded");
                popup.iframe.contentWindow.postMessage({
                    action: "sendAIMessage",
                    prompt: prompt
                }, "*");
            } catch (error) {
                console.error("Error handling Google Search summary:", error);
            }
        },
        
        /**
         * X·ª≠ l√Ω n·ªôi dung t·ª´ URL, YouTube ho·∫∑c vƒÉn b·∫£n ƒë∆∞·ª£c ch·ªçn
         * @param {Object} options - T√πy ch·ªçn cho ch·ª©c nƒÉng
         * @returns {Promise<Object>} N·ªôi dung v√† ti√™u ƒë·ªÅ ƒë√£ x·ª≠ l√Ω
         */
        async processContent(options) {
            const { linkUrl, selectionText } = options;
            let webContent = null;
            let title = document.title;
            
            try {
                // X·ª≠ l√Ω n·∫øu c√≥ URL
                if (linkUrl) {
                    // Ki·ªÉm tra n·∫øu l√† YouTube
                    const youtubeId = linkUrl.includes("youtube.com") ? Utils.getYouTubeVideoId(linkUrl) : undefined;
                    
                    if (youtubeId) {
                        // L·∫•y ph·ª• ƒë·ªÅ t·ª´ video YouTube
                        const videoInfo = await Utils.getYoutubeCaptionsFromVideoId(youtubeId);
                        webContent = Utils.mergeYoutubeCaptionToString(videoInfo.captions);
                        title = videoInfo.title;
                    } else {
                        // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho Medium articles
                        let finalUrl = linkUrl;
                        if (linkUrl.includes("https://medium.com/")) {
                            const url = new URL(linkUrl);
                            const pathParts = url.pathname.split("/");
                            finalUrl = "https://readmedium.com/" + pathParts[pathParts.length - 1] + url.search;
                            
                            // T·∫°o iframe ·∫©n cho Medium
                            setTimeout(() => {
                                Utils.createHiddenIframe(linkUrl);
                            }, 1000);
                        }
                        
                        // Ph√¢n t√≠ch n·ªôi dung t·ª´ URL
                        const article = await Utils.parseArticleFromURL(finalUrl);
                        if (article) {
                            webContent = article.content;
                            title = article.title;
                        }
                    }
                } 
                // X·ª≠ l√Ω n·∫øu ƒëang ·ªü trang YouTube
                else if (location.href.includes("youtube.com/watch?v=")) {
                    const youtubeId = Utils.getYouTubeVideoId();
                    const videoInfo = await Utils.getYoutubeCaptionsFromVideoId(youtubeId);
                    webContent = Utils.mergeYoutubeCaptionToString(videoInfo.captions);
                    title = videoInfo.title;
                }
                // X·ª≠ l√Ω n·∫øu c√≥ ƒëo·∫°n vƒÉn b·∫£n ƒë∆∞·ª£c ch·ªçn
                else if (selectionText && selectionText.length > 300) {
                    webContent = selectionText;
                }
                // M·∫∑c ƒë·ªãnh l·∫•y to√†n b·ªô n·ªôi dung trang
                else {
                    webContent = document.body.innerText;
                }
                
                return { webContent, title };
            } catch (error) {
                console.error("Error processing content:", error);
                return { webContent: document.body.innerText, title };
            }
        },
        
        /**
         * X·ª≠ l√Ω ch·ª©c nƒÉng t√≥m t·∫Øt n·ªôi dung
         * @param {Object} options - C√°c t√πy ch·ªçn
         * @returns {Promise<void>}
         */
        async handleSummaryContent(options) {
            try {
                const { webContent, title } = await this.processContent(options);
                const responseLanguage = await Utils.getResponseLanguage();
                
                const languagePrompt = `H√£y t√≥m t·∫Øt n·ªôi dung sau m·ªôt c√°ch d·ªÖ hi·ªÉu nh·∫•t b·∫±ng ti·∫øng ${responseLanguage}, n·ªôi dung bao g·ªìm 4 ph·∫ßn, 1 l√† ti√™u ƒë·ªÅ b√†i vi·∫øt, 2 l√† n·ªôi dung ch√≠nh ƒë∆∞·ª£c t√≥m g·ªçn trong 3-5 c√¢u, 3 l√† c√°c th√¥ng tin chi ti·∫øt ƒë∆∞·ª£c li·ªát k√™ d∆∞·ªõi d·∫°ng bullet, 4 l√† t√≥m t·∫Øt ng·∫Øn g·ªçn nh·ªØng ki·∫øn th·ª©c m·ªõi ƒë∆∞·ª£c r√∫t ra t·ª´ n·ªôi dung tr√™n gi√∫p m·ªü r·ªông t·∫ßm hi·ªÉu bi·∫øt c·ªßa t√¥i, h√£y tr·∫£ l·ªùi th·∫≥ng v√†o c√¢u h·ªèi, kh√¥ng c·∫ßn gi·ªõi thi·ªáu ki·ªÉu "Here is the summary of the content:".`;
                
                const prompt = `${languagePrompt}
Title: 
\`\`\`${title}\`\`\`
Content:
\`\`\`${webContent}\`\`\``;
                
                const popup = await AIPopup.initialize();
                popup.show();
                
                await Utils.waitFor("AIIframeLoaded");
                popup.iframe.contentWindow.postMessage({
                    action: "sendAIMessage",
                    prompt: prompt
                }, "*");
            } catch (error) {
                console.error("Error handling content summary:", error);
            }
        },
        
        /**
         * X·ª≠ l√Ω ch·ª©c nƒÉng h·ªèi ƒë√°p t·ª´ n·ªôi dung
         * @param {Object} options - C√°c t√πy ch·ªçn
         * @returns {Promise<void>}
         */
        async handleAskContent(options) {
            try {
                const { webContent, title } = await this.processContent(options);
                const responseLanguage = await Utils.getResponseLanguage();
                
                const languagePrompt = `remember to answer in ${responseLanguage}`;
                
                const prompt = `<role>Content analyst who answers user questions</role>
<required>Remember the following content and just answer 'I have remembered the content you sent, please ask me any question you want about this content' and say nothing more, the user will ask you later, ${languagePrompt}</required>
<web_page_title>${title}</web_page_title>
<web_page_content>${webContent}</web_page_content>`;
                
                const popup = await AIPopup.initialize();
                popup.show();
                
                await Utils.waitFor("AIIframeLoaded");
                popup.iframe.contentWindow.postMessage({
                    action: "sendAIMessage",
                    prompt: prompt
                }, "*");
            } catch (error) {
                console.error("Error handling ask content:", error);
            }
        },
        
        /**
         * X·ª≠ l√Ω ch·ª©c nƒÉng d·ªãch n·ªôi dung
         * @param {Object} options - C√°c t√πy ch·ªçn
         * @returns {Promise<void>}
         */
        async handleTranslateContent(options) {
            try {
                const context = Utils.getSelectionContext();
                const responseLanguage = await Utils.getResponseLanguage();
                
                const prompt = `<role>Translator, translate from English to ${responseLanguage} or vice versa</role>
<require>Translate the main content (main_text) below, keep the answer concise</require>
<before_text>${context.before}</before_text>
<main_text>${context.selected}</main_text>
<after_text>${context.after}</after_text>
<result_format>
    ### Main text (Only show if main_text is less than 100 words)
    ### Translated text
</result_format>`;
                
                const popup = await AIPopup.initialize();
                popup.show();
                
                await Utils.waitFor("AIIframeLoaded");
                popup.iframe.contentWindow.postMessage({
                    action: "sendAIMessage",
                    prompt: prompt
                }, "*");
            } catch (error) {
                console.error("Error handling translation:", error);
            }
        }
    };

    // L·∫Øng nghe tin nh·∫Øn t·ª´ background script
    chrome.runtime.onMessage.addListener(async function(request, sender, sendResponse) {
        const googleSearchPattern = /google\.com(\.vn)?\/search/;
        
        try {
            // Handle Google search results
            if (request.action === "onClickSummaryContentMenu" && googleSearchPattern.test(location.href)) {
                const searchQuery = Utils.getUrlParams().get("q");
                await ContentHandler.handleGoogleSearchSummary(searchQuery);
            } 
            // Handle content summary
            else if (request.action === "onClickSummaryContentMenu") {
                await ContentHandler.handleSummaryContent({
                    linkUrl: request.linkUrl,
                    selectionText: request.selectionText
                });
            } 
            // Handle content translation
            else if (request.action === "onClickTranslateContentMenu") {
                await ContentHandler.handleTranslateContent({
                    selectionText: request.selectionText
                });
            } 
            // Handle content Q&A
            else if (request.action === "onClickAskContentMenu") {
                await ContentHandler.handleAskContent({
                    linkUrl: request.linkUrl,
                    selectionText: request.selectionText
                });
            }
        } catch (error) {
            console.error("Error handling message:", error);
        }
    });

    // Kh·ªüi t·∫°o menu bubble cho thi·∫øt b·ªã di ƒë·ªông
    MobileBubbleMenu.initialize();
})();

console.log("AI Chrome Extension V2")